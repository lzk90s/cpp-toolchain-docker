#FROM nvidia/cuda:9.2-devel-ubuntu20.04
FROM ubuntu:20.04

WORKDIR /root

ENV DEBIAN_FRONTEND noninteractive

RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list && \
    sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list && \
    rm -rf /etc/apt/sources.list.d/* && \
    apt-get update --fix-missing && \
    apt-get install -y \
    curl pkg-config build-essential make g++ cmake automake libtool wget unzip libtbb2 libtbb-dev \
    libjpeg8-dev libpng-dev libavcodec-dev libavformat-dev \
    libswscale-dev libv4l-dev libatlas-base-dev gfortran libfreetype6 libfreetype6-dev mingw-w64-x86-64-dev binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 \
    libhdf5-dev  libssl-dev libgoogle-glog-dev && \
    wget https://xmake.io/shget.text -O /tmp/xmake_install.sh && \
    bash /tmp/xmake_install.sh && \
    echo "PATH=/root/.local/bin:$PATH">>/etc/profile && \
    . /etc/profile && \
    apt-get autoclean && apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN \
	update-alternatives --install /usr/bin/x86_64-w64-mingw32-g++ x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix 90 && \
	update-alternatives --install /usr/bin/x86_64-w64-mingw32-gcc x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix 90

ENV INSTALL_PREFIX=/usr/local/ \
    CFLAGS=-fPIC \
    CXXFLAGS="-fPIC -std=c++11" \
    XMAKE_ROOT=y \
    PATH=$PATH:/root/.local/bin \
	CROSS_PREFIX=x86_64-w64-mingw32- \
	CROSS_HOST=x86_64-w64-mingw32 \
	CROSS_INSTALL_PREFIX=/usr/x86_64-w64-mingw32


#编译opencv
ADD package/opencv opencv
ADD package/ippicv opencv/3rdparty/ippicv
RUN \
    cd /root/opencv && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=RELEASE \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
    -DINSTALL_C_EXAMPLES=OFF \
    -DINSTALL_PYTHON_EXAMPLES=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_SHARED_LIBS=OFF \
    -DBUILD_TESTS=OFF \
    -DIPPROOT=~opencv/3rdparty/ippicv/ .. && \
    cd ~/opencv/build && \
    make -j $(nproc) && \
    make install && \
    cp ~/opencv/build/3rdparty/lib/* /usr/local/lib && \
    cp ~/opencv/3rdparty/ippicv/ippicv_lnx/icv/lib/intel64/* /usr/local/lib && \
    make clean  && \
    # clean opencv repos
    rm -rf ~/opencv/build && \
    rm -rf ~/opencv/3rdparty && \
    rm -rf ~/opencv/doc && \
    rm -rf ~/opencv/include && \
    rm -rf ~/opencv/platforms && \
    rm -rf ~/opencv/modules && \
    rm -rf ~/opencv/.git

#编译zlib
ADD package/zlib zlib
RUN \
    cd /root/zlib && \
    ./configure --static --prefix=$INSTALL_PREFIX && \
    make -j$(nproc) && \
    make install && \
    make clean
#编译mingw32-zlib
RUN \
	cd /root/zlib && \
	./configure --static --prefix=$CROSS_INSTALL_PREFIX  && \
	make -j$(nproc) && \
	make install && \
	make clean


#编译gflags
ADD package/gflags gflags
RUN \
    cd /root/gflags && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX .. && \
    make  -j$(nproc) && \
    make install && \
    make clean


#编译protobuf
ADD package/protobuf protobuf
RUN \
    cd /root/protobuf && \
    ./autogen.sh && \
    ./configure --disable-shared --prefix=$INSTALL_PREFIX && \
    make -j$(nproc) && \
    make install && \
    make clean

#编译leveldb
ADD package/leveldb leveldb
RUN \
    cd /root/leveldb && \
    sed -i 's/3.9/3.2/g' CMakeLists.txt && \
    mkdir build && \
    cd build && \
    cmake -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX .. && \
    make -j$(nproc) && \
    make install && \
    make clean

#编译brpc
ADD package/brpc brpc
RUN \
    cd /root/brpc && \
    sed -i 's/char/signed char/g' src/butil/containers/case_ignored_flat_map.cpp && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DBUILD_SHARED_LIBS=0 -DBUILD_STATIC_LIBS=1 -DWITH_DEBUG_SYMBOLS=OFF && \
    make  -j$(nproc) && \
    make install && \
    make clean && \
    rm -rf $INSTALL_PREFIX/lib/libbrpc.so

#编译nasm
RUN \
    curl -O https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.gz && \
    tar -xzvf nasm-*.tar.gz && \
    cd /root/nasm-* && \
    ./configure  --prefix=/usr &&\
    make -j$(nproc) && \
    make install && \
    make clean

#编译x264
ADD package/x264 x264
RUN \
    cd /root/x264 && \
    ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-cli && \
    make -j$(nproc) && \
    make install && \
    make clean
#编译mingw32-x264
RUN \
    cd /root/x264 && \
	CC=${CROSS_PREFIX}gcc ./configure --prefix=$CROSS_INSTALL_PREFIX --cross-prefix=${CROSS_PREFIX} --host=${CROSS_HOST} --enable-static --disable-cli && \
	make -j$(nproc) && \
	make install && \
	make clean


#编译x265
ADD package/x265 x265
RUN \
	cd /root/x265/build/linux && \
	cmake -G "Unix Makefiles" ../../source -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DENABLE_SHARED=0 -DENABLE_CLI=0 && \
    sed -i 's/lx265/lx265 -lstdc++ -lm -lrt -ldl -lpthread/g' x265.pc && \
    make -j$(nproc) && \
    make install && \
    make clean
#编译mingw32-x265
RUN \
	cd /root/x265/build/msys && \
	cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE=toolchain-x86_64-w64-mingw32.cmake ../../source  -DCMAKE_INSTALL_PREFIX=${CROSS_INSTALL_PREFIX} -DENABLE_SHARED=0 -DENABLE_CLI=0 && \
	sed -i 's/\-lrt\ \-ldl\ \-lpthread$//g' x265.pc && \
	sed -i 's/\-lgcc$/-lgcc -lpthread/g' x265.pc && \
	make -j$(nproc) && \
	make install && \
	make clean

#编译libjpeg-turbo
ADD package/libjpeg-turbo libjpeg-turbo
RUN \
    cd /root/libjpeg-turbo && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DENABLE_SHARED=0 -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX && \
    make -j$(nproc) && \
    make install && \
    make clean

#编译libyuv
ADD package/libyuv libyuv
RUN \
    cd /root/libyuv && \
    mkdir build && \
    cd build  && \
    cmake .. -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DCMAKE_BUILD_TYPE=Release && \
    make -j$(nproc) && \
    make install && \
    rm -rf /usr/local/lib/libyuv.so* && \
    make clean


#编译FFmpeg
ADD package/nv-codec-headers nv-codec-headers
ADD package/FFmpeg FFmpeg
ADD FFmpeg-flv-h265.patch /root/
ADD FFmpeg-algo-patch/libavfilter /root/FFmpeg/libavfilter
ADD FFmpeg-algo-patch/*.sh /root/FFmpeg/
RUN \
    cd /root/nv-codec-headers && \
    make install && \
    cd /root/FFmpeg && \
    patch -p1 < /root/FFmpeg-flv-h265.patch && \
    sed -i 's/[\r]*$//g' patch_ffmpeg.sh && sh patch_ffmpeg.sh && \
    ./configure --prefix=$INSTALL_PREFIX --enable-static --enable-gpl --enable-openssl --enable-nonfree --enable-libx264 --enable-libx265 --disable-doc && \
    make -j$(nproc) && \
    make install && \
    make clean
#编译mingw32-ffmpeg
RUN \
	cd /root/FFmpeg && \
	./configure --prefix=${CROSS_INSTALL_PREFIX} --disable-everything --enable-cross-compile --cross-prefix=${CROSS_PREFIX} --arch=x86_64 --target-os=mingw32 --disable-debug --enable-static --disable-shared --enable-swscale --enable-avformat --disable-avfilter --disable-avdevice  --enable-runtime-cpudetect --enable-version3 --enable-decoder=h264 --enable-decoder=mpeg4 --enable-decoder=flv --enable-protocol=file --enable-protocol=http  --enable-parser=h264 --enable-parser=hevc --enable-decoder=hevc --enable-parser=mpeg4video --enable-parser=mpegvideo --enable-demuxers --disable-encoders --disable-programs --disable-doc && \
	make -j$(nproc) && \
	make install && \
	make clean
